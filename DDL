--DDL creation of PK
ALTER TABLE CONTACTS
ADD CONSTRAINT PK_CONTACTS 
PRIMARY KEY (CONTACTID);

ALTER TABLE COUNTRIES
ADD CONSTRAINT PK_COUNTRIES
PRIMARY KEY (COUNTRYID);

ALTER TABLE CUSTOMERS
ADD CONSTRAINT PK_CUSTOMERS
PRIMARY KEY (CUSTOMERID);

ALTER TABLE DEPARTMENT
ADD CONSTRAINT PK_DEPARTMENT 
PRIMARY KEY (DEPTID);

ALTER TABLE EMPLOYEES
ADD CONSTRAINT PK_EMPLOYEES 
PRIMARY KEY (EMPLOYEEID);

ALTER TABLE LOCATIONS
ADD CONSTRAINT PK_LOCATIONS 
PRIMARY KEY (LOCATIONID);

ALTER TABLE ORDERS
ADD CONSTRAINT PK_ORDERS 
PRIMARY KEY (ORDERID);

ALTER TABLE PRODUCT_CATEGORY
ADD CONSTRAINT PK_PRODUCT_CATEGORY 
PRIMARY KEY (CATEGORYID);

ALTER TABLE PRODUCTS
ADD CONSTRAINT PK_PRODUCTS 
PRIMARY KEY (PRODUCTID);

ALTER TABLE REGIONS
ADD CONSTRAINT PK_REGIONS 
PRIMARY KEY (REGIONID);

ALTER TABLE WAREHOUSES
ADD CONSTRAINT PK_WAREHOUSES 
PRIMARY KEY (WAREHOUSEID);

ALTER TABLE INVENTORIES
ADD CONSTRAINT PK_INVENTORIES
PRIMARY KEY (INVENTORYID);

----------------------------set not null-------------

ALTER TABLE CONTACTS MODIFY ( CUSTOMERID NOT NULL);
ALTER TABLE COUNTRIES MODIFY ( COUNTRYNAME NOT NULL);
ALTER TABLE COUNTRIES MODIFY ( REGIONID NOT NULL);
ALTER TABLE DEPARTMENT MODIFY ( DEPARTMENTNAME NOT NULL);
ALTER TABLE EMPLOYEES MODIFY ( MANAGERID NOT NULL);
ALTER TABLE EMPLOYEES MODIFY ( DEPTID NOT NULL);
ALTER TABLE LOCATIONS MODIFY ( POSTAL_CODE NOT NULL);
ALTER TABLE LOCATIONS MODIFY ( ADDRESS NOT NULL);
ALTER TABLE LOCATIONS MODIFY ( COUNTRYID NOT NULL);
ALTER TABLE ORDER_ITEMS MODIFY ( ORDERID NOT NULL);
ALTER TABLE ORDER_ITEMS MODIFY ( PRODUCTID NOT NULL);
ALTER TABLE ORDER_ITEMS MODIFY ( QUANTITY NOT NULL);
ALTER TABLE ORDER_ITEMS MODIFY ( UNITPRICE NOT NULL);
ALTER TABLE ORDERS MODIFY ( CUSTOMERID NOT NULL);
ALTER TABLE ORDERS MODIFY ( SALESMANID NOT NULL);
ALTER TABLE ORDERS MODIFY ( ORDERDATE NOT NULL);
ALTER TABLE PRODUCT_CATEGORY MODIFY ( CATEGORYNAME NOT NULL);
ALTER TABLE PRODUCTS MODIFY ( PRODUCTNAME NOT NULL);
ALTER TABLE PRODUCTS MODIFY ( STANDARDCOST NOT NULL);
ALTER TABLE PRODUCTS MODIFY ( LISTPRICE NOT NULL);
ALTER TABLE PRODUCTS MODIFY ( CATEGORYID NOT NULL);
ALTER TABLE REGIONS MODIFY ( REGIONNAME NOT NULL);
ALTER TABLE WAREHOUSES MODIFY ( WAREHOUSENAME NOT NULL);
ALTER TABLE WAREHOUSES MODIFY ( LOCATIONID NOT NULL);

-------------------------------------------DEFAULT values--------------
ALTER TABLE REGIONS
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE REGIONS
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE REGIONS
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE REGIONS
MODIFY UPDATE_BY DEFAULT 1;

ALTER TABLE CONTACTS
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE CONTACTS
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE CONTACTS
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE CONTACTS
MODIFY UPDATE_BY DEFAULT 1;

ALTER TABLE COUNTRIES
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE COUNTRIES
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE COUNTRIES
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE COUNTRIES
MODIFY UPDATE_BY DEFAULT 1;

ALTER TABLE CUSTOMERS
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE CUSTOMERS
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE CUSTOMERS
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE CUSTOMERS
MODIFY UPDATE_BY DEFAULT 1;
ALTER TABLE CUSTOMERS
MODIFY STATUS DEFAULT 1;

ALTER TABLE DEPARTMENT
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE DEPARTMENT
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE DEPARTMENT
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE DEPARTMENT
MODIFY UPDATE_BY DEFAULT 1;

ALTER TABLE EMPLOYEES
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE EMPLOYEES
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE EMPLOYEES
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE EMPLOYEES
MODIFY UPDATE_BY DEFAULT 1;
ALTER TABLE EMPLOYEES
MODIFY STATUS DEFAULT 1;

ALTER TABLE LOCATIONS
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE LOCATIONS
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE LOCATIONS
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE LOCATIONS
MODIFY UPDATE_BY DEFAULT 1;

ALTER TABLE INVENTORIES
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE INVENTORIES
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE INVENTORIES
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE INVENTORIES
MODIFY UPDATE_BY DEFAULT 1;
ALTER TABLE INVENTORIES
MODIFY STATUS DEFAULT 1;

ALTER TABLE ORDER_ITEMS
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE ORDER_ITEMS
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE ORDER_ITEMS
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE ORDER_ITEMS
MODIFY UPDATE_BY DEFAULT 1;

ALTER TABLE ORDERS
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE ORDERS
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE ORDERS
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE ORDERS
MODIFY UPDATE_BY DEFAULT 1;
ALTER TABLE ORDERS
MODIFY STATUS DEFAULT 'pending';

ALTER TABLE PRODUCT_CATEGORY
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE PRODUCT_CATEGORY
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE PRODUCT_CATEGORY
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE PRODUCT_CATEGORY
MODIFY UPDATE_BY DEFAULT 1;
ALTER TABLE PRODUCT_CATEGORY
MODIFY STATUS DEFAULT 1;

ALTER TABLE PRODUCTS
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE PRODUCTS
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE PRODUCTS
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE PRODUCTS
MODIFY UPDATE_BY DEFAULT 1;
ALTER TABLE PRODUCTS
MODIFY STATUS DEFAULT 1;

ALTER TABLE WAREHOUSES
MODIFY CREATE_DT DEFAULT sysdate;
ALTER TABLE WAREHOUSES
MODIFY UPDATE_DT DEFAULT sysdate;
ALTER TABLE WAREHOUSES
MODIFY CREATE_BY DEFAULT 1;
ALTER TABLE WAREHOUSES
MODIFY UPDATE_BY DEFAULT 1;

----------------------------------FK---------------
ALTER TABLE COUNTRIES
ADD CONSTRAINT fk_COUNTRIES
  FOREIGN KEY (REGIONID)
  REFERENCES REGIONS(REGIONID);

ALTER TABLE DEPARTMENT
ADD CONSTRAINT fk_DEPARTMENT
  FOREIGN KEY (LOCATIONID)
  REFERENCES LOCATIONS(LOCATIONID);
  
ALTER TABLE INVENTORIES
ADD CONSTRAINT fk_INVENTORIES
  FOREIGN KEY (PRODUCTID)
  REFERENCES PRODUCTS(PRODUCTID);

ALTER TABLE INVENTORIES
ADD CONSTRAINT fk_INVENTORIES1
  FOREIGN KEY (WAREHOUSEID)
  REFERENCES WAREHOUSES(WAREHOUSEID);

ALTER TABLE LOCATIONS
ADD CONSTRAINT fk_LOCATIONS
  FOREIGN KEY (COUNTRYID)
  REFERENCES COUNTRIES(COUNTRYID);

ALTER TABLE ORDER_ITEMS
ADD CONSTRAINT fk_ORDER_ITEMS
  FOREIGN KEY (ORDERID)
  REFERENCES ORDERS(ORDERID);
  
ALTER TABLE ORDER_ITEMS
ADD CONSTRAINT fk_ORDER_ITEMS1
  FOREIGN KEY (PRODUCTID)
  REFERENCES PRODUCTS(PRODUCTID);

ALTER TABLE ORDERS
ADD CONSTRAINT fk_ORDERS
  FOREIGN KEY (CUSTOMERID)
  REFERENCES CUSTOMERS(CUSTOMERID);

ALTER TABLE ORDERS
ADD CONSTRAINT fk_ORDERS1
  FOREIGN KEY (SALESMANID)
  REFERENCES EMPLOYEES(EMPLOYEEID);

ALTER TABLE PRODUCTS
ADD CONSTRAINT fk_PRODUCTS
  FOREIGN KEY (CATEGORYID)
  REFERENCES PRODUCT_CATEGORY(CATEGORYID);

ALTER TABLE WAREHOUSES
ADD CONSTRAINT fk_WAREHOUSES
  FOREIGN KEY (LOCATIONID)
  REFERENCES LOCATIONS(LOCATIONID);

------------------------------------unique CONSTRAINT------------
ALTER TABLE INVENTORIES
    ADD CONSTRAINT unique_INVENTORIES UNIQUE (WAREHOUSEID,PRODUCTID);

ALTER TABLE WAREHOUSES
    ADD CONSTRAINT unique_WAREHOUSES UNIQUE (LOCATIONID,WAREHOUSENAME);
---------------------------------------audit trigger----------------
create or replace trigger ORDERS_AUDIT_AUD_TRG after insert or update or delete on ORDERS
for each row
declare 
vc_mod_type varchar2(50);
vc_batch_id number(10,0);
begin
vc_batch_id := ORDERS_AUDIT_seq.nextval;
case when inserting
then
vc_mod_type := 'INSERT';
 insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'CUSTOMERID',
null,
to_char(:new.CUSTOMERID),
vc_mod_type,
vc_batch_id
);
 insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'STATUS',
null,
to_char(:new.STATUS),
vc_mod_type,
vc_batch_id
);
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'SALESMANID',
null,
to_char(:new.SALESMANID),
vc_mod_type,
vc_batch_id
);
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'ORDERDATE',
null,
to_char(:new.ORDERDATE),
vc_mod_type,
vc_batch_id
);
when updating
then
vc_mod_type := 'UPDATE';
if nvl(:old.CUSTOMERID,0) = nvl(:new.CUSTOMERID,0)
then
null;
else
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'CUSTOMERID',
to_char(:old.CUSTOMERID),
to_char(:new.CUSTOMERID),
vc_mod_type,
vc_batch_id
) ;
end if;
if nvl(:old.STATUS,0) = nvl(:new.STATUS,0)
then
null;
else
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'STATUS',
to_char(:old.STATUS),
to_char(:new.STATUS),
vc_mod_type,
vc_batch_id
) ;
end if;
if nvl(:old.SALESMANID,0) = nvl(:new.SALESMANID,0)
then
null;
else
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'SALESMANID',
to_char(:old.SALESMANID),
to_char(:new.SALESMANID),
vc_mod_type,
vc_batch_id
) ;
end if;
if nvl(:old.ORDERDATE,'01-JAN-0001') = nvl(:new.ORDERDATE,'01-JAN-0001')
then
null;
else
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'ORDERDATE',
to_char(:old.ORDERDATE),
to_char(:new.ORDERDATE),
vc_mod_type,
vc_batch_id
) ;
end if;
when deleting
then
vc_mod_type:= 'DELETE';
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'CUSTOMERID',
to_char(:old.CUSTOMERID),
null,
vc_mod_type,
vc_batch_id
) ;
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'STATUS',
to_char(:old.STATUS),
null,
vc_mod_type,
vc_batch_id
) ;
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'SALESMANID',
to_char(:old.SALESMANID),
null,
vc_mod_type,
vc_batch_id
) ;
insert into ORDERS_AUDIT (ORDERID,
FIELD_NAME,
OLD_VALUE,
NEW_VALUE,
MODIFICATION_TYPE,
AUDIT_BATCH_ID) values
(:new.ORDERID,
'ORDERDATE',
to_char(:old.ORDERDATE),
null,
vc_mod_type,
vc_batch_id
) ;
end case;
end;
--------------------------SYNONYM-----------------------
CREATE SYNONYM	COUNTRIES	FOR onlinestoredb.	COUNTRIES	;
CREATE SYNONYM	CUSTOMERS	FOR onlinestoredb.	CUSTOMERS	;
CREATE SYNONYM	DEPARTMENT	FOR onlinestoredb.	DEPARTMENT	;
CREATE SYNONYM	EMPLOYEES	FOR onlinestoredb.	EMPLOYEES	;
CREATE SYNONYM	LOCATIONS	FOR onlinestoredb.	LOCATIONS	;
CREATE SYNONYM	ORDERS	FOR onlinestoredb.	ORDERS	;
CREATE SYNONYM	PRODUCT_CATEGORY	FOR onlinestoredb.	PRODUCT_CATEGORY	;
CREATE SYNONYM	PRODUCTS	FOR onlinestoredb.	PRODUCTS	;
CREATE SYNONYM	REGIONS	FOR onlinestoredb.	REGIONS	;
CREATE SYNONYM	WAREHOUSES	FOR onlinestoredb.	WAREHOUSES	;
CREATE SYNONYM	CONTACTS	FOR onlinestoredb.	CONTACTS	;
CREATE SYNONYM	INVENTORIES	FOR onlinestoredb.	INVENTORIES	;
CREATE SYNONYM	ORDER_ITEMS	FOR onlinestoredb.	ORDER_ITEMS	;
CREATE SYNONYM	COUNTRIES_BKP	FOR onlinestoredb.	COUNTRIES_BKP	;
CREATE SYNONYM	CUSTOMERS_BKP	FOR onlinestoredb.	CUSTOMERS_BKP	;
CREATE SYNONYM	DEPARTMENT_BKP	FOR onlinestoredb.	DEPARTMENT_BKP	;
CREATE SYNONYM	EMPLOYEES_BKP	FOR onlinestoredb.	EMPLOYEES_BKP	;
CREATE SYNONYM	LOCATIONS_BKP	FOR onlinestoredb.	LOCATIONS_BKP	;
CREATE SYNONYM	ORDERS_BKP	FOR onlinestoredb.	ORDERS_BKP	;
CREATE SYNONYM	PRODUCT_CATEGORY_BKP	FOR onlinestoredb.	PRODUCT_CATEGORY_BKP	;
CREATE SYNONYM	PRODUCTS_BKP	FOR onlinestoredb.	PRODUCTS_BKP	;
CREATE SYNONYM	REGIONS_BKP	FOR onlinestoredb.	REGIONS_BKP	;
CREATE SYNONYM	WAREHOUSES_BKP	FOR onlinestoredb.	WAREHOUSES_BKP	;
CREATE SYNONYM	CONTACTS_BKP	FOR onlinestoredb.	CONTACTS_BKP	;
CREATE SYNONYM	INVENTORIES_BKP	FOR onlinestoredb.	INVENTORIES_BKP	;
CREATE SYNONYM	ORDER_ITEMS_BKP	FOR onlinestoredb.	ORDER_ITEMS_BKP	;
CREATE SYNONYM	cust_placed_max_orders_vw	FOR onlinestoredb.	cust_placed_max_orders_vw	;
CREATE SYNONYM	oldb_most_sold_prod_in_cont_vw	FOR onlinestoredb.	oldb_most_sold_prod_in_cont_vw	;
CREATE SYNONYM	OLDB_UPDATE_ORDER_STATUS_PRC	FOR onlinestoredb.	OLDB_UPDATE_ORDER_STATUS_PRC	;
CREATE SYNONYM	OLDB_INSERT_ORDER_PRC	FOR onlinestoredb.	OLDB_INSERT_ORDER_PRC	;
CREATE SYNONYM	OLDB_GET_ORDER_DETAILS_PRC	FOR onlinestoredb.	OLDB_GET_ORDER_DETAILS_PRC	;

------------------------------------procs-------------
  --update order status according to customer action

CREATE OR REPLACE PROCEDURE OLDB_UPDATE_ORDER_STATUS_PRC(
       p_orderid IN ORDERS.ORDERID%TYPE,
       p_STATUS IN ORDERS.STATUS%TYPE)
IS
BEGIN

  UPDATE ORDERS SET STATUS = p_STATUS where ORDERID = p_orderid;
  --update order status according to customer action
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
   raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;

-------------------------------------
--generate order
CREATE OR REPLACE PROCEDURE OLDB_INSERT_ORDER_PRC(
       p_ORDERID IN ORDERS.ORDERID%TYPE,
       p_CUSTOMERID IN ORDERS.CUSTOMERID%TYPE,
       p_SALESMANID IN ORDERS.SALESMANID%TYPE,
       p_date IN ORDERS.ORDERDATE%TYPE)
IS
BEGIN

  INSERT INTO ORDERS (ORDERID,
    CUSTOMERID,
    SALESMANID,
    ORDERDATE) 
  VALUES (p_ORDERID, p_CUSTOMERID,p_SALESMANID, p_date);
--generate order
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
   raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/
-----------------------------------
--return the result set for order details
CREATE OR REPLACE PROCEDURE OLDB_GET_ORDER_DETAILS_PRC(
    p_orederid NUMBER
)
AS 
    C_ORDERS SYS_REFCURSOR;
BEGIN
    -- open the cursor
    OPEN C_ORDERS FOR
        select pr.PRODUCTNAME,orditm.QUANTITY,ordr.CUSTOMERID,cust.NAME,
cust.ADDRESS,
cust.WEBSITE,
cust.FACEBOOK,
cust.TWITTER,
cust.WHATSAPP from 
order_items orditm,ORDERS ordr,
INVENTORIES invt, Warehouses wh, Locations lcn,CUSTOMERS cust,products pr
where ordr.ORDERID = p_orederid
and ordr.ORDERID = orditm.ORDERID
and orditm.productid = invt.productid
and orditm.INVENTORYID = invt.INVENTORYID
and wh.warehouseid = invt.warehouseid
and lcn.locationid = wh.locationid
and ordr.CUSTOMERID = cust.CUSTOMERID
and pr.productid = invt.productid;

    -- return the result set for order details
    dbms_sql.return_result(C_ORDERS);
END;